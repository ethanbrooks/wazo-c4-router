# Relay request using the API
route[RELAY_API] {
    $http_req(all) = $null;
    $http_req(suspend) = 1;
    $http_req(timeout) = HTTP_API_TIMEOUT;
    $http_req(method) = "POST";
    $http_req(hdr) = "Content-Type: application/json";
    jansson_set("string", "event", "sip-routing", "$var(http_routing_query)");
    jansson_set("string", "source_ip", $avp(source_ip), "$var(http_routing_query)");
    jansson_set("int", "source_port", $avp(source_port), "$var(http_routing_query)");
#!ifdef WITH_AUTH
    jansson_set("string", "auth", 1, "$var(http_routing_query)");
    jansson_set("string", "domain", $fd, "$var(http_routing_query)");
    jansson_set("string", "username", $aU, "$var(http_routing_query)");
#!else
    jansson_set("int", "auth", 0, "$var(http_routing_query)");
#!endif
    jansson_set("string", "call_id", $ci, "$var(http_routing_query)");
    jansson_set("string", "from_name", $fn, "$var(http_routing_query)");
    jansson_set("string", "from_uri", $fu, "$var(http_routing_query)");
    jansson_set("string", "from_tag", $ft, "$var(http_routing_query)");
    jansson_set("string", "to_name", $tn, "$var(http_routing_query)");
    jansson_set("string", "to_uri", $tu, "$var(http_routing_query)");
    jansson_set("string", "to_tag", $tt, "$var(http_routing_query)");
    xlog("L_INFO","API ASYNC ROUTING REQUEST: $var(http_routing_query)\n");
    $http_req(body) = $var(http_routing_query);
    t_newtran();
    http_async_query(HTTP_API_ROUTING_ENDPOINT, "RELAY_API_RESPONSE");
}


# Relay request using the API (response)
route[RELAY_API_RESPONSE] {
    if ($http_ok && $http_rs == 200) {
        xlog("L_INFO","API ROUTING RESPONSE: $http_rb\n");
#!ifdef WITH_AUTH
        if (jansson_get("auth", $http_rb, "$var(auth)") && defined $var(auth)) {
            jansson_get("success", "$var(auth)", "$var(auth_success)");
            if (!$var(auth_success)) {
                auth_challenge("$fd", "1");
                exit;
            }
            jansson_get("password_ha1", "$var(auth)", "$avp(password)");
            if (defined $var(password) && !strempty($avp(password))) {
                if (!pv_auth_check("$fd", "$avp(password)", "1", "0")) {
                    auth_challenge("$fd", "1");
                    exit;
                } else {
                    consume_credentials();
                }
            }
            jansson_get("tenant_id", "$var(auth)", "$var(tenant_id)");
            jansson_get("carrier_trunk_id", "$var(auth)", "$var(carrier_trunk_id)");
            jansson_get("ipbx_id", "$var(auth)", "$var(ipbx_id)");
            $dlg_var(tenant_id) = $var(tenant_id);
            $dlg_var(carrier_trunk_id) = $var(carrier_trunk_id);
            $dlg_var(ipbx_id) = $var(ipbx_id);
        }
#!endif
        if (jansson_get("rtjson", $http_rb, "$var(rtjson)")) {
            if (!jansson_get("success", $var(rtjson), "$var(success)") || !$var(success)) {
                send_reply(404, "Not found");
                exit;
            } else {
                rtjson_init_routes("$var(rtjson)");
                rtjson_push_routes();
                #$avp(rtjson_routes) = 1;
                # set auth-related AVPs
                if (jansson_get("auth_username", $var(rtjson), "$var(auth_username)") &&
                    jansson_get("auth_password", $var(rtjson), "$var(auth_password)") &&
                    jansson_get("realm", $var(rtjson), "$var(realm)")) {
                    $avp(auser) = $var(auth_username);
                    $avp(apass) = $var(auth_password);
                    $avp(arealm) = $var(realm);
                }
                # relay the message

                t_on_branch("MANAGE_BRANCH");
                t_on_failure("MANAGE_FAILURE");

                route(RELAY);
                return;
            }
        }
    }
    send_reply(500, "API Not Available");
    exit;
}
